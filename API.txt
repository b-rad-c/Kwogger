Python Library Documentation: package kwogger

NAME
    kwogger

PACKAGE CONTENTS
    __main__

CLASSES
    builtins.Exception(builtins.BaseException)
        KwoggerParseError
    builtins.object
        KwogEntry
        KwogFile
        KwogParser
        KwogTimer
    logging.Formatter(builtins.object)
        KwogFormatter
    logging.LoggerAdapter(builtins.object)
        KwogAdapter
    
    class KwogAdapter(logging.LoggerAdapter)
     |  KwogAdapter(logger, **context)
     |  
     |  A subclass of logging.LoggerAdapter to be used with a log handler
     |  
     |  This adapter is designed to add contextual logging data via key value pairs to each entry over the lifetime of this
     |  object.
     |  
     |  Method resolution order:
     |      KwogAdapter
     |      logging.LoggerAdapter
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, logger, **context)
     |      Initialize the adapter with a logger and context data
     |      
     |      :param logger: The logger to be used (typical returned by logging.getLogger)
     |      :param context: key word arguments to be added as context data to each entry logged by this object
     |  
     |  critical(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug except use log level CRITICAL
     |  
     |  critical_exc(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug_exc except use log level CRITICAL
     |  
     |  debug(self, msg, *args, **kwargs)
     |      Write a log entry with DEBUG logging level
     |      
     |      :param msg: (str) this string will be logged on the entry as the value for the msg key
     |      :param args: to be passed to underlying logging method (KwogAdapter.logger._log)
     |      :param kwargs: key word data to be passed to log entry
     |      :return: None
     |  
     |  debug_exc(self, msg, *args, **kwargs)
     |      Write a log entry with DEBUG logging level and pass exc_info=True to underlying logger to capture
     |      exception and traceback information.
     |      
     |      :param msg: (str) this string will be logged on the entry as the value for the msg key
     |      :param args: to be passed to underlying logging method (KwogAdapter.logger._log)
     |      :param kwargs: key word data to be passed to log entry
     |      :return: None
     |  
     |  error(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug except use log level ERROR
     |  
     |  error_exc(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug_exc except use log level ERROR
     |  
     |  exception(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.warning_exc
     |  
     |  generate_id(self, field_name='uuid')
     |      Generate a unique id to be added to the context logger. It uses the built in uuid.uuid3 method as passes in
     |      the current unix epoch time and pid of the current running process to guarantee uniqueness on the machine
     |      running this logger
     |      
     |      :param field_name: the unique id will be added to the loggers context namespace with this name
     |      :return: (str) string representation of generated uuid
     |  
     |  info(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug except use log level INFO
     |  
     |  info_exc(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug_exc except use log level INFO
     |  
     |  log(self, level, msg, *args, **kwargs)
     |      Write a log entry with a dynamically supplied level
     |      
     |      :param level: (int) logging level to be used
     |      :param msg: (str) this string will be logged on the entry as the value for the msg key
     |      :param args: to be passed to underlying logging method (KwogAdapter.logger._log)
     |      :param kwargs: key word data to be passed to log entry
     |      :return: None
     |  
     |  log_exc(self, level, msg, *args, **kwargs)
     |      Write a log entry with a dynamically supplied level and pass exc_info=True to underlying logger to capture
     |      exception and traceback information.
     |      
     |      :param level: (int) logging level to be used
     |      :param msg: (str) this string will be logged on the entry as the value for the msg key
     |      :param args: to be passed to underlying logging method (KwogAdapter.logger._log)
     |      :param kwargs: key word data to be passed to log entry
     |      :return: None
     |  
     |  process(self, msg, args, kwargs)
     |      Process the logging message and keyword arguments passed in to
     |      a logging call to insert contextual information. You can either
     |      manipulate the message itself, the keyword args or both. Return
     |      the message and kwargs modified (or not) to suit your needs.
     |      
     |      Normally, you'll only need to override this one method in a
     |      LoggerAdapter subclass for your specific needs.
     |  
     |  timer_checkpoint(self, name, **kwargs)
     |      Get the time elapsed for <name> instance of KwogTimer on this object and then write an INFO level log entry with
     |      the name of the timer, its start time and elapsed time on the entry using keys timer_name, start_time,
     |      and elapsed_time respectively as additional keywords
     |      
     |      :param name:(str)
     |      :param kwargs: keywords to be passed to log entry
     |      :return: None
     |  
     |  timer_start(self, name, **kwargs)
     |      Start an instance of KwogTimer and add to this object's timers dict using <name> as the key
     |      and then write an INFO level log entry with the name of the timer and its start time on the entry using
     |      keys timer_name and start_time respectively as additional keywords
     |      
     |      :param name:(str)
     |      :param kwargs: keywords to be passed to log entry
     |      :return: None
     |  
     |  timer_stop(self, name, **kwargs)
     |      Stop the <name> instance of KwogTimer on this object and then write an INFO level log entry with the name of the
     |      timer, its start time, elapsed time and end time on the entry using keys timer_name, start_time, elapsed_time
     |      and end_time respectively as additional keywords
     |      
     |      :param name:(str)
     |      :param kwargs: keywords to be passed to log entry
     |      :return: None
     |  
     |  warning(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug except use log level WARNING
     |  
     |  warning_exc(self, msg, *args, **kwargs)
     |      Same documentation as KwogAdapter.debug_exc except use log level WARNING
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.LoggerAdapter:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  getEffectiveLevel(self)
     |      Get the effective level for the underlying logger.
     |  
     |  hasHandlers(self)
     |      See if the underlying logger has any handlers.
     |  
     |  isEnabledFor(self, level)
     |      Is this logger enabled for level 'level'?
     |  
     |  setLevel(self, level)
     |      Set the specified level on the underlying logger.
     |  
     |  warn(self, msg, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from logging.LoggerAdapter:
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.LoggerAdapter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  manager
    
    class KwogEntry(builtins.object)
     |  KwogEntry(context=None, source=None, entry=None, exc=None, raw=None)
     |  
     |  The KwogEntry class has four "namespaces" for storing key/value data in each log entry. The values can be of
     |  any type but only None, bool, int, float and str and preserved when serializing to the log file and parsing
     |  afterword. Any other value will be cast to a string with str before serializing.
     |  
     |  namespaces:
     |      context
     |          the kwargs attached to the logging adapter, this data is added to each log entry over the
     |          lifetime of the KwogAdapter object to correlate ane search multiple entries
     |      source
     |          information about the log entry such as timestamp, level, module and line number
     |      entry
     |          The first string argument to the logging call (info, error_exc, etc) is places in this namespace under
     |          field name 'msg'. All other kwargs from that call are set here. Order is preserved with OrderedDict
     |      exception
     |          When handling and exception this contains three fields, the 'class' name of the exception,
     |          the exception's 'msg' and 'traceback'
     |  
     |  When serialized before writing the namespaces are abbreviated to c, s, e and exc respectively.
     |  
     |  example:
     |  
     |      [written to log file as a single line, using breaks here for readability]
     |  
     |      s.time="2021-01-05 23:28:23.253117"
     |      s.log="test_kwogger" s.level="WARNING" s.path="./test_kwogger.py" s.func="my_func_name" s.lineno=44
     |  
     |      e.msg="TEST_EXCEPTION"  e.field1=None e.field2=True e.field3=1 e.field4=1.5 e.field5="hello"
     |      e.other_type="<module 'os' from 'os.py'>"
     |  
     |      exc.class="TypeError"
     |      exc.msg="unsupported operand type(s) for +: 'int' and 'str'"
     |      exc.traceback="[ ... truncated ... ]"
     |  
     |      c.is_unit_test=True c.test_id="70ea8059-f6c5-3f52-855b-15531e2824d4"
     |  
     |  Methods defined here:
     |  
     |  __init__(self, context=None, source=None, entry=None, exc=None, raw=None)
     |      :param context: (None|dict) key value pairs for data in this namespace or None
     |      :param source: (None|dict) key value pairs for data in this namespace or None
     |      :param entry: (None|dict) key value pairs for data in this namespace or None
     |      :param exc: (None|dict) key value pairs for data in this namespace or None
     |      :param raw: (str) the original line as read from file
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format(self, formatter)
     |      Format a string from the data on this object
     |      
     |      :param formatter: (str) the name of the formatter,
     |          must reference a method on this object with naming convention "_formatter_{formatter}"
     |      
     |          built in formatters:
     |              'log_file' for serializing to a log file
     |              'cli' for printing to a console with colors
     |      
     |      :return: (str)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  parse(line) from builtins.type
     |      Parse a line from a log file and return an entry of this class
     |      
     |      :param line: (str) the line as read from the log file (with or without trailing line break)
     |      :return: (KwogEntry)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  handling_exception
     |      :return: (bool) whether or not this entry is handling and exception
     |  
     |  level
     |      :return: (int) the numerical value of the entry's log level
     |  
     |  level_name
     |      :return: (str) the name of the entry's log level
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class KwogFile(builtins.object)
     |  KwogFile(path, level=10, seek='head')
     |  
     |  Utility for parsing and tailing a log file.
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, exc_type, exc_val, exc_tb)
     |  
     |  __init__(self, path, level=10, seek='head')
     |      :param path: (str) the path to the log file
     |      :param level: (int) ignore entries below this log level
     |      :param seek: (str, 'head'|'tail', default=head) seek to the head of tail of a file when instantiating
     |  
     |  __iter__(self)
     |  
     |  __next__(self)
     |  
     |  close(self)
     |      Close the file handle
     |      
     |      :return: None
     |  
     |  follow(self)
     |      Parse and yield remaining lines from current position in file to EOF and then follow file like unix 'tail -f' cmd
     |      
     |      :yields: (KwogEntry)
     |  
     |  parse_line(self)
     |      Get next line in file using readline and return parsed KwogEntry
     |      
     |      :return: (KwogEntry)
     |  
     |  seek_head(self)
     |      Seek to the head of the file
     |      
     |      :return: None
     |  
     |  seek_tail(self)
     |      Seek to the tail of the file
     |      
     |      :return:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class KwogFormatter(logging.Formatter)
     |  KwogFormatter(fmt=None, datefmt=None, style='%', validate=True)
     |  
     |  A subclass of logging.Formatter to be used with a log handler
     |  
     |  Method resolution order:
     |      KwogFormatter
     |      logging.Formatter
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  format(self, record)
     |      Format the specified record as text.
     |      
     |      The record's attribute dictionary is used as the operand to a
     |      string formatting operation which yields the returned string.
     |      Before formatting the dictionary, a couple of preparatory steps
     |      are carried out. The message attribute of the record is computed
     |      using LogRecord.getMessage(). If the formatting string uses the
     |      time (as determined by a call to usesTime(), formatTime() is
     |      called to format the event time. If there is exception information,
     |      it is formatted using formatException() and appended to the message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from logging.Formatter:
     |  
     |  __init__(self, fmt=None, datefmt=None, style='%', validate=True)
     |      Initialize the formatter with specified format strings.
     |      
     |      Initialize the formatter either with the specified format string, or a
     |      default as described above. Allow for specialized date formatting with
     |      the optional datefmt argument. If datefmt is omitted, you get an
     |      ISO8601-like (or RFC 3339-like) format.
     |      
     |      Use a style parameter of '%', '{' or '$' to specify that you want to
     |      use one of %-formatting, :meth:`str.format` (``{}``) formatting or
     |      :class:`string.Template` formatting in your format string.
     |      
     |      .. versionchanged:: 3.2
     |         Added the ``style`` parameter.
     |  
     |  formatException(self, ei)
     |      Format and return the specified exception information as a string.
     |      
     |      This default implementation just uses
     |      traceback.print_exception()
     |  
     |  formatMessage(self, record)
     |  
     |  formatStack(self, stack_info)
     |      This method is provided as an extension point for specialized
     |      formatting of stack information.
     |      
     |      The input data is a string as returned from a call to
     |      :func:`traceback.print_stack`, but with the last trailing newline
     |      removed.
     |      
     |      The base implementation just returns the value passed in.
     |  
     |  formatTime(self, record, datefmt=None)
     |      Return the creation time of the specified LogRecord as formatted text.
     |      
     |      This method should be called from format() by a formatter which
     |      wants to make use of a formatted time. This method can be overridden
     |      in formatters to provide for any specific requirement, but the
     |      basic behaviour is as follows: if datefmt (a string) is specified,
     |      it is used with time.strftime() to format the creation time of the
     |      record. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.
     |      The resulting string is returned. This function uses a user-configurable
     |      function to convert the creation time to a tuple. By default,
     |      time.localtime() is used; to change this for a particular formatter
     |      instance, set the 'converter' attribute to a function with the same
     |      signature as time.localtime() or time.gmtime(). To change it for all
     |      formatters, for example if you want all logging times to be shown in GMT,
     |      set the 'converter' attribute in the Formatter class.
     |  
     |  usesTime(self)
     |      Check if the format uses the creation time of the record.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from logging.Formatter:
     |  
     |  converter = localtime(...)
     |      localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
     |                                tm_sec,tm_wday,tm_yday,tm_isdst)
     |      
     |      Convert seconds since the Epoch to a time tuple expressing local time.
     |      When 'seconds' is not passed in, convert the current time instead.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from logging.Formatter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from logging.Formatter:
     |  
     |  default_msec_format = '%s,%03d'
     |  
     |  default_time_format = '%Y-%m-%d %H:%M:%S'
    
    class KwogParser(builtins.object)
     |  KwogParser(line)
     |  
     |  Parse data from a KwogEntry serialized to a string with KwogEntry._formatter_log_file (default when writing to
     |  a log file) and set each namespace on self.data. Parsing is done during instantiation.
     |  
     |  example:
     |  self.data = {'s': {...}, 'e': {...}, 'c': {...}, 'exc': {...}}
     |  
     |  Methods defined here:
     |  
     |  __init__(self, line)
     |      :param line:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class KwogTimer(builtins.object)
     |  KwogTimer(name: str, start_time: float = <factory>, end_time: float = None) -> None
     |  
     |  Simple class for timing a task
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |  
     |  __init__(self, name: str, start_time: float = <factory>, end_time: float = None) -> None
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |  
     |  elapsed_time(self)
     |      :return: (float) the time elapsed from 'start_time' to 'end_time', or time.time() if still running
     |  
     |  stop(self)
     |      stop the timer (set the end_time on the object)
     |      :return: (None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __annotations__ = {'end_time': <class 'float'>, 'name': <class 'str'>,...
     |  
     |  __dataclass_fields__ = {'end_time': Field(name='end_time',type=<class ...
     |  
     |  __dataclass_params__ = _DataclassParams(init=True,repr=True,eq=True,or...
     |  
     |  __hash__ = None
     |  
     |  end_time = None
    
    class KwoggerParseError(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      KwoggerParseError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    get_level(level)
        Get information about a logging level
        
        :param level: (str|int) the integer or string representation of a logging level
        :return: this function will return a tuple of (int, str) representing the level passed in
    
    get_level_color(level)
        Return the name of the color for a given logging level, used for printing colorized log entries to a console
        
        :param level: (str|int) the integer or string representation of a logging level
        :return: (str)
    
    level_name(level)
        Convenience function to return name of a logging level
        
        :param level: (str|int) the integer or string representation of a logging level
        :return: (str) name of logging level
    
    level_value(level)
        Convenience function to return integer value of a logging level
        
        :param level: (str|int) the integer or string representation of a logging level
        :return: (int) value of logging level
    
    rotate_by_size(name, path, level=10, max_bytes=5242880, backups=5, **context)
        Initialize an instance of KwogAdapter using built in RotatingFileHandler configured to rotate file by size
        
        :param name: The name of the logger to be fetched with logging.getLogger
        :param path: path to the log file
        :param level: the logging level to instantiate the logger with
        :param max_bytes: rotate the log file after it has reached this size
        :param backups: keep at most this many backup log files
        :param context: key word arguments to provide context data when instantiating KwogAdapter
        :return: KwogAdapter
    
    rotate_by_time(name, path, level=10, when='midnight', interval=1, utc=False, at_time=None, backups=5, **context)
        Initialize an instance of KwogAdapter using built in TimedRotatingFileHandler configured to rotate file by size
        
        :param name: The name of the logger to be fetched with logging.getLogger
        :param path: path to the log file
        :param level: the logging level to instantiate the logger with
        :param when: when to rotate the file, see built in logging.handlers.TimedRotatingFileHandler for more info
        :param interval: interval to rotate the file, see built in logging.handlers.TimedRotatingFileHandler for more info
        :param utc: if True use UTC time to determine when to rotate, else use local time
        :param at_time: time to rotate the log file, see built in logging.handlers.TimedRotatingFileHandler for more info
        :param backups: keep at most this many backup log files
        :param context: key word arguments to provide context data when instantiating KwogAdapter
        :return: KwogAdapter

DATA
    CRITICAL = 50
    DEBUG = 10
    ERROR = 40
    FATAL = 50
    INFO = 20
    NOTSET = 0
    WARN = 30
    WARNING = 30

FILE
    /Users/brad/Code/Kwogger/kwogger/__init__.py

